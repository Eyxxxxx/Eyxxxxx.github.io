<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>汇编语言-王爽</title>
    <url>/posts/masm/</url>
    <content><![CDATA[<h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p><strong>实验代码如果用notepad++等记事本写的，应当将文件的编码格式保存为utf-8，其它编码格式保存的文件会在编译的时候报莫名其妙的错</strong></p>
<h2 id="CH6"><a href="#CH6" class="headerlink" title="CH6"></a>CH6</h2><h3 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h3><p>(2).4 该段实际占有的空间为$\lceil \frac{N}{16}\rceil\times 16$，<br>即一个段会自动对齐成16字节的倍数</p>
<p>(5)<strong>不能简单的把段寄存器ss当作一个存段地址的寄存器来用——见本书(第四版)第74页2.(2)。</strong> 定义一个栈段后，栈空间内的内容会被进行一些默认修改！所以如果简单把一个数据段通过ss寄存器定义为一个栈段会导致数据段中的数据丢失！（并且这种做法也显然不符合代码规范。）<strong>（第(6)题同理）</strong><br>因为这里数据都是静态的、固定的，所以考虑用偏移来解题比较简单。<br>即标号b的地址为<code>a+10H</code>，标号c的地址为<code>a+20H</code></p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">a <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">db</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span></span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">db</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span></span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">c <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">db</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">c ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">	start:</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">ax</span>,a</span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span>	<span class="comment">;offset</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span>	<span class="comment">;counter</span></span><br><span class="line">		</span><br><span class="line"><span class="symbol">	s:</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span>    <span class="comment">;store a+b</span></span><br><span class="line">		<span class="keyword">add</span> <span class="built_in">dx</span>,[<span class="built_in">bx</span>]</span><br><span class="line">		<span class="keyword">add</span> <span class="built_in">dx</span>,[<span class="built_in">bx</span>+<span class="number">10h</span>]</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">mov</span> [<span class="built_in">bx</span>+<span class="number">20h</span>],<span class="built_in">dx</span></span><br><span class="line">		<span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">		<span class="keyword">loop</span> s</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>(6) 数据段不可以定义为一个栈段，最后存储数据的地方可以被定义为一个栈段。利用栈从高地址向低地址存储的特性，完成题目逆序存储的要求。<br>注意，</p>
<ol>
<li>定义一个栈段后对栈空间的数据修改发生在定义时。</li>
<li>此处整个栈空间最终都将重新写入，所以前述对栈空间的修改将被最终计算结果再次覆盖。</li>
</ol>
<p>（不过感觉这么做好像也不是很符合代码规范）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">a <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0ah</span>,<span class="number">0bh</span>,<span class="number">0ch</span>,<span class="number">0dh</span>,<span class="number">0eh</span>,<span class="number">0fh</span>,<span class="number">0ffh</span></span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,b</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,a</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line">	</span><br><span class="line"><span class="symbol">    s:</span></span><br><span class="line">		<span class="keyword">push</span> <span class="built_in">ds</span>:[<span class="built_in">bx</span>]</span><br><span class="line">		<span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line">		<span class="keyword">loop</span> s</span><br><span class="line"></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h2 id="CH7"><a href="#CH7" class="headerlink" title="CH7"></a>CH7</h2><h3 id="实验6"><a href="#实验6" class="headerlink" title="实验6"></a>实验6</h3><p>(2)注意细节，</p>
<ul>
<li>比如起始地址下标从0开始数；</li>
<li>数据段中的单词如果不手动用空格对齐至16字节，是不会有任何形式的自动对齐的，<strong>所以要手动打上空格，便于后续的寻址操作。</strong></li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ss</span>:stack, <span class="built_in">ds</span>:data</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">	<span class="built_in">db</span> <span class="string">&#x27;1. display      &#x27;</span></span><br><span class="line">	<span class="built_in">db</span> <span class="string">&#x27;2. brows        &#x27;</span></span><br><span class="line">	<span class="built_in">db</span> <span class="string">&#x27;3. replace      &#x27;</span></span><br><span class="line">	<span class="built_in">db</span> <span class="string">&#x27;4. modify       &#x27;</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,data	<span class="comment">;initialize reg ds</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,stack	<span class="comment">;initialize a stack</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span>	<span class="comment">; row counter</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">4</span>	<span class="comment">; counter for outer loop</span></span><br><span class="line">	</span><br><span class="line"><span class="symbol">	s:</span> 	</span><br><span class="line">        <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">4</span>	<span class="comment">; counter for inner loop</span></span><br><span class="line">		<span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">0</span>	<span class="comment">; column counter</span></span><br><span class="line">		</span><br><span class="line"><span class="symbol">		s0:</span>	</span><br><span class="line">			<span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">bx</span>+<span class="built_in">di</span>+<span class="number">3</span>]	<span class="comment">;lowercase2uppercase</span></span><br><span class="line">			<span class="keyword">and</span> <span class="built_in">al</span>,<span class="number">11011111b</span></span><br><span class="line">			<span class="keyword">mov</span> [<span class="built_in">bx</span>+<span class="built_in">di</span>+<span class="number">3</span>],<span class="built_in">al</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line">			<span class="keyword">loop</span> s0</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">16</span></span><br><span class="line">		<span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">		<span class="keyword">loop</span> s</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>自己玩儿</category>
      </categories>
      <tags>
        <tag>assembly</tag>
        <tag>dos</tag>
      </tags>
  </entry>
</search>
