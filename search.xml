<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>汇编语言（第四版）-王爽 (题解)-2</title>
    <url>/posts/masm-wangshuang-exercise-2/</url>
    <content><![CDATA[<p>本书十一至十七章的部分习题\代码题记录</p>
<a id="more"></a>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a href="https://www.cnblogs.com/Mayfly-nymph/p/12046088.html">《汇编语言》（王爽）课后答案 - Hk_Mayfly - 博客园</a></p>
<h2 id="注"><a class="markdownIt-Anchor" href="#注"></a> 注</h2>
<p>实验代码如果用 notepad++等记事本写的，<strong>应当将文件的编码格式保存为 utf-8，其它编码格式保存的文件会在编译的时候报莫名其妙的错</strong></p>
<h2 id="ch11"><a class="markdownIt-Anchor" href="#ch11"></a> CH11</h2>
<h3 id="实验-11"><a class="markdownIt-Anchor" href="#实验-11"></a> 实验 11</h3>
<ul>
<li>把 ascii 码值大于等于 97 且小于等于 122 的减去 32 即可
<ul>
<li>不明白的可以参考 p229 检测点 11.3 的第(1)题</li>
</ul>
</li>
<li>可以用之前写的 show_str 子程序作输出——所以代码变得有点长</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&quot;Beginner&#x27;s All-purpose Symbolic Instruction Code.&quot;</span>,<span class="number">0</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">4</span> dup(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">begin:</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">call</span> letterc</span><br><span class="line"></span><br><span class="line"> <span class="keyword">mov</span> <span class="number">dh</span>,<span class="number">10</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">15</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">71h</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">call</span> show_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;name:   letterc</span></span><br><span class="line"><span class="comment">;function: 将以0结尾的字符串中的小写字母转变成大写字母</span></span><br><span class="line"><span class="comment">;parameter: ds:si指向字符串首地址</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">letterc:</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"><span class="symbol">  s:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">si</span>]</span><br><span class="line">  <span class="keyword">cmp</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">je</span> ok_letterc</span><br><span class="line">   <span class="keyword">cmp</span> <span class="built_in">al</span>,<span class="number">97</span></span><br><span class="line">   <span class="keyword">jb</span> s0</span><br><span class="line">   <span class="keyword">cmp</span> <span class="built_in">al</span>,<span class="number">122</span></span><br><span class="line">   <span class="keyword">ja</span> s0</span><br><span class="line">   <span class="keyword">and</span> <span class="built_in">al</span>,<span class="number">11011111B</span> <span class="comment">;将小写转换成大写</span></span><br><span class="line">   <span class="keyword">mov</span> [<span class="built_in">si</span>],<span class="built_in">al</span></span><br><span class="line"><span class="symbol">  s0:</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">  <span class="keyword">jmp</span> s</span><br><span class="line"></span><br><span class="line"><span class="symbol">ok_letterc:</span></span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;名称: show_str</span></span><br><span class="line"><span class="comment">;功能：在指定的位置，用指定的颜色，显示一个用0结束的字符串</span></span><br><span class="line"><span class="comment">;参数： (dh)=行号(取值范围0~24),</span></span><br><span class="line"><span class="comment">;  (dl)=列号(取值范围0~79)</span></span><br><span class="line"><span class="comment">;  (cl)=颜色,</span></span><br><span class="line"><span class="comment">;  ds:si 指向字符串的首地址</span></span><br><span class="line"><span class="comment">;返回：无</span></span><br><span class="line"><span class="comment">;test_data: 在屏幕8行3列处，用绿色显示data段中的字符串</span></span><br><span class="line"><span class="symbol">show_str:</span></span><br><span class="line"><span class="comment">;保存现场</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">di</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">es</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;先计算行偏移地址，再加到页首起始地址上，存放在es段寄存器中</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="number">0ah</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="number">dh</span></span><br><span class="line"> <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="number">0b800h</span> <span class="comment">;0b800h是显存的起始地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;计算列偏移地址。列偏移起始地址=列号*2-2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">dl</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="built_in">bl</span></span><br><span class="line"> <span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;暂存颜色属性</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">cl</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;开始打印数据前的部分置为空</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line">  <span class="comment">;计算需置空的字符个数</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">dl</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="number">ch</span>,<span class="number">0</span></span><br><span class="line">  <span class="comment">;计算起始列起始地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line">   <span class="keyword">call</span> set_space</span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"> <span class="comment">;按要求搬运内容至显存指定位置，以指定格式输出</span></span><br><span class="line"><span class="symbol"> prt:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="number">ch</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">ds</span>:[<span class="built_in">si</span>]</span><br><span class="line">  <span class="keyword">jcxz</span> after  <span class="comment">;若cx==0，子程序运行结束</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>+<span class="number">1</span>],<span class="built_in">al</span> <span class="comment">;搬运属性</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">cl</span>  <span class="comment">;搬运字符</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">2</span></span><br><span class="line">  <span class="comment">;搬运下一个字符</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">jmp</span> short prt</span><br><span class="line"></span><br><span class="line"> <span class="comment">;结束打印数据后的部分置为空</span></span><br><span class="line"><span class="symbol"> after:</span></span><br><span class="line">  <span class="comment">;计算需置空的字符个数</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">di</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">2</span></span><br><span class="line">  <span class="keyword">div</span> <span class="built_in">cl</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">80</span></span><br><span class="line">  <span class="keyword">sub</span> <span class="built_in">cl</span>,<span class="built_in">al</span></span><br><span class="line">  <span class="comment">;计算起始列起始地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="built_in">di</span></span><br><span class="line">  <span class="keyword">call</span> set_space</span><br><span class="line"></span><br><span class="line"><span class="comment">;恢复现场</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">es</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">di</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;name:set_space</span></span><br><span class="line"><span class="comment">;function: 使得指定区间的所有列显示为空</span></span><br><span class="line"><span class="comment">;parameter: (dl)=起始列起始地址(取值范围1~80)</span></span><br><span class="line"><span class="comment">;   (cx)=区间中字符个数(取值范围0~80)</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line"><span class="symbol">set_space:</span></span><br><span class="line"><span class="keyword">jcxz</span> end_set_space</span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="comment">;低8位存字符ascii码置零，高8位存属性置零</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="number">bh</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="built_in">dl</span></span><br><span class="line"><span class="symbol"> set_:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>],<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">loop</span> set_</span><br><span class="line"></span><br><span class="line"><span class="symbol">end_set_space:</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end begin</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-2/实验11.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验11</div>
</center>
<h2 id="ch12"><a class="markdownIt-Anchor" href="#ch12"></a> CH12</h2>
<h3 id="ch1212-关于栈的思考"><a class="markdownIt-Anchor" href="#ch1212-关于栈的思考"></a> CH12.12 关于栈的思考</h3>
<p>该小节解释了<code>Debug程序</code>利用单步中断来实现<code>T命令</code>时和栈相关部分的具体实现(或者说具体操作)。简单来说，Debug 程序执行 T 命令过程中，<strong>利用栈来保存现场并恢复现场</strong>——就这一句本身以及与不同指令结合时可以引发诸多问题。</p>
<p>本书到此为止我觉得与该小节相关的部分列举如下</p>
<ul>
<li>实验 2.(2) p74</li>
<li>实验 5.(5)和 5.(6) p136</li>
<li>检测点 10.5(1) p195</li>
</ul>
<h4 id="关于-实验-22-p74"><a class="markdownIt-Anchor" href="#关于-实验-22-p74"></a> 关于 实验 2.(2) p74</h4>
<p>需注意，看到栈中内容发生改变是在 debug 模式下看到的，这改变确实与 debug 模式有关。p250 页解释了入栈的内容及这些内容入栈的原因。</p>
<p>此外，中断过程确实首先需要入栈标志寄存器，但是这里栈底的字的值无从得知具体意义——可以证明不是标志寄存器的值且与之无关，应当和 debug 程序的具体实现有关，需要看源代码，这里不做深究。</p>
<h4 id="实验-55和-56-p136"><a class="markdownIt-Anchor" href="#实验-55和-56-p136"></a> 实验 5.(5)和 5.(6) p136</h4>
<p>写这俩实验的时候，最开始我总妄想把源数据的段地址存放至<code>ss</code>寄存器，或者把目标数据段同时定义为一个栈段——详细分析见 CH6 实验 5，但这样做是不对的！而且由于当时不会在屏幕上输出结果，只会通过调试及单步调试看运行结果，就导致结果总是和预期出现很多偏差——栈中总是写入了莫名其妙的数据——当然现在知道了这些是 debug 相关的数据。</p>
<h4 id="检测点-1051-p195"><a class="markdownIt-Anchor" href="#检测点-1051-p195"></a> 检测点 10.5(1) p195</h4>
<p><a href="https://fishc.com.cn/forum.php?mod=viewthread&amp;tid=100283&amp;page=1#pid3090276">参考资料</a></p>
<p>以下考虑实际实行结果，而非 debug 中单步跟踪的结果
<strong>总结</strong>：
这个题目实际上执行了两次 call 指令
第一次，call 跳转到 cs:00 处，因为第一次时 ds:[0eh]单元里是初始化时候的 0，先获取(ds:[0eh])=0，再执行 call 指令，即把 call 指令后一条指令的 ip 入栈。
第二次，call 跳转到上次入栈的指令地址(即 call 指令后第一条指令的地址)第一条 inc ax 处，继续向下执行。</p>
<p><strong>在 debug 模式下运行以下代码，但不使用单步调试，</strong> 直接跳转到标号 ending 结束处，观察寄存器 dx 和 ax 的值即可证明 call 指令执行了两次。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">8</span> dup(<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">call</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0eh</span>]</span><br><span class="line"> <span class="keyword">inc</span> <span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">inc</span> <span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">inc</span> <span class="built_in">ax</span></span><br><span class="line"></span><br><span class="line"><span class="symbol"> ending:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结束后<code>(DX)=0015H</code>说明执行了入口地址<code>start</code>之前的指令 <code>mov dx,21</code>，证明第一次跳转至 cs:00 处。第二次跳转的情况是显然的。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-2/检测点10.5.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">检测点10.5</div>
</center>
<p>补充说明：(摘自本节前述参考资料)</p>
<blockquote>
<p>（一）在这个题目里，压入栈里的东东到底是多少？我不知道，你不知道，王爽也不知道。但我们知道，压入的是指令 inc ax 所在处的偏移地址。
（二）但是这个执行就千万要注意了，绝不是那么想当然。</p>
<p><strong>想当然的想法—错误的想法：</strong>
（1）读取指令 CALL WORD PTR DS:[0EH]
（2）此时 IP 指向下一条指令。
（3）将 IP 的值压入栈，压入后 SP 指向 0EH 单元，其中的值 IP 为下一条指令的偏移地址。
（4）读取 DS:[0EH]的值，将其给 IP 后，程序跳转到 CS:IP 处执行。因为 IP 就是下一条指令的偏移，所以程序直接跳转到 INC AX 处执行。</p>
<p>（三）<strong>正确的思路-真正正确的执行过程，这就是为什么题目里会有圆括号里那些文字的原因。</strong>
（1）读取指令 CALL WORD PTR DS:[0EH]
（2）CPU 知道这是一个跳转指令，所以它把要跳转的目标地址暂时放到一个临时的位置
（3）执行 push 返回地址—也就是下一条指令处偏移地址的操作
（4）把临时位置处的地址给 IP，跳转到这个 IP 地址。</p>
</blockquote>
<p>具体成因和 Intel 指令手册中 Call 指令执行流程有关。
简单来说就是：</p>
<blockquote>
<p>跳转的目标位置在读 call 指令的时候就已经定了，而不是 push 之后定的。
所谓用 ds:[0eH]处的值代替 IP，这时候用的是临时位置处的值，而这个值是 push 之前的值。<strong>其实也很好理解，CPU 说：我 TMD 的指令都读取完了，怎么还轮得到你 PUSH 一下就把我读的给改了呢</strong></p>
</blockquote>
<h3 id="实验-12"><a class="markdownIt-Anchor" href="#实验-12"></a> 实验 12</h3>
<p>几个想当然的错误：</p>
<ul>
<li>
<p>在<code>do0程序</code>中需要将该程序中的数据<code>divide error</code>搬运至显存，则首先需要用<code>ds:si</code>给出数据地址。此处的<code>di</code>必须显示的用<code>0202h</code>给出，而不能用<code>offset do0 + 2</code>（开头处的 jmp short 跳转指令占两字节），因为此处用<code>offset</code>求得的偏移是编译时计算的<code>do0</code>这个标号在整个 do0 安装程序中的相对于安装程序入口地址处的偏移，而不是相对于 do0 程序入口地址处的偏移。【这其实和课本 p246 程序 12.2 在数据存储上犯的错误是类似的。】</p>
<ul>
<li>此外，地址若是十六进制数值要记得加上 h</li>
</ul>
</li>
<li>
<p>在<code>do0程序</code>中，从程序数据段向显存搬运字符串时应<strong>选择合适的寄存器</strong>！应选择 8 位寄存器！</p>
<ul>
<li>此处的循环计数器的值倒是可以用<code>offset do0_start - offset do0-2</code>求。因为两个<code>offset</code>相减计算的是两者间的距离，与其起始位置无关了。这样做可以增加程序的一般性——且不用数字符串中字符的个数。
<ul>
<li>但是注意，这要求知道第一条 jmp 指令的大小。<code>jmp short 标号</code>占两字节，但是<code>jmp 标号</code>占 3 字节，且第三字节为 nop！细节处都是坑！</li>
</ul>
</li>
</ul>
</li>
<li>
<p>其它粗心错误</p>
<ul>
<li>安装程序结尾要写上 <code>mov ax,4c00h</code>和<code>int 21h</code>
<ul>
<li><code>int</code>后面的中断号是<code>21h</code>，不要忘记<code>h</code></li>
</ul>
</li>
<li><code>do0程序</code>，是先写<code>mov ax,4c00h</code>和<code>int 21h</code>，然后再写便于计算程序长度的<code>do0_end: nop</code></li>
<li>地址计算上，各个操作的段地址是多少，应该从哪个(段)寄存器取值给哪个(段)寄存器赋值；**偏移地址是相对于哪个起点的偏移。**都要仔细。</li>
</ul>
</li>
</ul>
<p>注：下面代码中自带了一个除法溢出的运算，直接调用自定义 0 号中断处理程序输出<code>divide error</code>并退出。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;name: 0号中断处理程序 的 安装程序</span></span><br><span class="line"><span class="comment">;function: 安装do0程序，使得0号中断发生时，指向该处理程序</span></span><br><span class="line"><span class="comment">;parameter: null</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="comment">;安装do0程序</span></span><br><span class="line"> <span class="comment">;ds:si指向源数据地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,offset do0</span><br><span class="line"> <span class="comment">;es:di指向数据目标存储地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">200h</span></span><br><span class="line"> <span class="comment">;搬运数据</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,offset do0_end - offset do0</span><br><span class="line"> <span class="keyword">cld</span></span><br><span class="line"> <span class="keyword">rep</span> <span class="keyword">movsb</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;设置中断向量表</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">0</span>*<span class="number">4</span>],<span class="number">200h</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="number">0</span>*<span class="number">4</span>+<span class="number">2</span>],<span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;除法溢出计算，调用自定义0号中断处理程序</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">1000</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">1</span></span><br><span class="line"> <span class="keyword">div</span> <span class="built_in">bl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;do0程序</span></span><br><span class="line"><span class="comment">;name: 0号中断处理程序 及其 安装程序</span></span><br><span class="line"><span class="comment">;function: 除法溢出发生时，在屏幕中间显示字符串&quot;divide error!&quot;,然后返回DOS</span></span><br><span class="line"><span class="comment">;parameter: null</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line"><span class="symbol">do0:</span></span><br><span class="line"> <span class="keyword">jmp</span> short do0_start</span><br><span class="line"> <span class="built_in">db</span> <span class="string">&quot;divide error&quot;</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">do0_start:</span></span><br><span class="line"><span class="comment">;ds:si指向源数据地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">202h</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;es:di指向显存中的目标地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0b800h</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">12</span>*<span class="number">160</span>+<span class="number">32</span>*<span class="number">2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,offset do0_start - offset do0-<span class="number">2</span></span><br><span class="line"><span class="symbol">move:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">si</span>]</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">al</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">di</span>+<span class="number">1</span>],<span class="number">71h</span></span><br><span class="line"> <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line"> <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">loop</span> move</span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">do0_end:</span></span><br><span class="line"> <span class="keyword">nop</span></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-2/实验12-图一.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验12-图一</div>
</center>
<p>单独另写一个除法溢出的程序<strong>运行在已安装自定义 0 号中断处理程序的 dos 窗口下</strong>也可以看到有相同的报错提示。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-2/实验12-图二.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验12-图二</div>
</center>
<h3 id="ch12-关键词"><a class="markdownIt-Anchor" href="#ch12-关键词"></a> CH12 关键词</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>不正式的说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>中断</td>
<td></td>
</tr>
<tr>
<td>中断信息</td>
<td>一些描述信息，包含必要参数</td>
</tr>
<tr>
<td>中断源</td>
<td>人看的</td>
</tr>
<tr>
<td>中断类型码</td>
<td>机器看的</td>
</tr>
<tr>
<td>中断过程</td>
<td>中断(指令) 引发中断过程后，进入中断例程</td>
</tr>
<tr>
<td>中断处理程序(中断例程)</td>
<td>干活儿的</td>
</tr>
<tr>
<td>中断处理程序的入口地址(中断向量)</td>
<td></td>
</tr>
<tr>
<td>中断处理程序的入口地址的列表(中断向量表)</td>
<td></td>
</tr>
<tr>
<td>中断向量表的地址</td>
<td>每个表项占两个字</td>
</tr>
</tbody>
</table>
<h2 id="ch13"><a class="markdownIt-Anchor" href="#ch13"></a> CH13</h2>
<h3 id="检测点1312"><a class="markdownIt-Anchor" href="#检测点1312"></a> 检测点13.1.(2)</h3>
<p>中断例程7ch的实现给出了两种方法。
个人认为参照课本p257给出的写法所写出来的法一更好，因为使用了默认sreg为<code>ss</code>的<code>bp</code>寄存器，更明确的体现了访问栈中元素，程序可读性更高。</p>
<p>代码如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">    <span class="built_in">db</span> <span class="string">&#x27;conversation&#x27;</span>,<span class="number">0</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"><span class="comment">;name: 7CH中断处理程序 的 安装程序</span></span><br><span class="line"><span class="comment">;function: 安装7CH程序，使得7CH号中断发生时，指向该处理程序</span></span><br><span class="line"><span class="comment">;parameter: null</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line">    <span class="comment">;安装7CH程序</span></span><br><span class="line">    <span class="comment">;ds:si指向源数据地址</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>,offset do7C</span><br><span class="line">    <span class="comment">;es:di指向数据目标存储地址</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">200h</span></span><br><span class="line">    <span class="comment">;搬运数据</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">cx</span>,offset do7C_end - offset do7C</span><br><span class="line">    <span class="keyword">cld</span></span><br><span class="line">    <span class="keyword">rep</span> <span class="keyword">movsb</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">;设置中断向量表</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">7ch</span>*<span class="number">4</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>],<span class="number">200h</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>+<span class="number">2</span>],<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;name: null</span></span><br><span class="line"><span class="comment">;function: 在屏幕的第12行，显示data段中已0结尾的字符串</span></span><br><span class="line"><span class="comment">;parameter: null</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0b800h</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">12</span>*<span class="number">160</span>+<span class="number">32</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">    s:</span></span><br><span class="line">        <span class="keyword">cmp</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">si</span>],<span class="number">0</span></span><br><span class="line">        <span class="keyword">je</span> ok</span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">si</span>]</span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">al</span></span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">di</span>+<span class="number">1</span>],<span class="number">71h</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">        <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">2</span></span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">bx</span>,offset s - offset ok</span><br><span class="line">        <span class="keyword">int</span> <span class="number">7ch</span></span><br><span class="line"><span class="symbol">ok:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;name: 7CH中断处理程序</span></span><br><span class="line"><span class="comment">;function: jmp near ptr s</span></span><br><span class="line"><span class="comment">;parameter: (bx)=转移位移 (位移由16位reg表示)</span></span><br><span class="line"><span class="comment">;return: cs:ip指向跳转目的地址</span></span><br><span class="line"><span class="symbol">do7C:</span></span><br><span class="line">    <span class="keyword">jmp</span> do7C_start</span><br><span class="line"></span><br><span class="line"><span class="symbol">do7C_start:</span></span><br><span class="line">    <span class="comment">;法一</span></span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">bp</span></span><br><span class="line">        <span class="keyword">mov</span> <span class="built_in">bp</span>,<span class="built_in">sp</span></span><br><span class="line">        <span class="keyword">add</span> [<span class="built_in">bp</span>+<span class="number">2</span>],<span class="built_in">bx</span></span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">bp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">;法二</span></span><br><span class="line"><span class="comment">;    pop ax</span></span><br><span class="line"><span class="comment">;    add ax,bx</span></span><br><span class="line"><span class="comment">;    push ax</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">iret</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">do7C_end:</span></span><br><span class="line">    <span class="keyword">nop</span></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-2/检测点13.1.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">检测点13.1</div>
</center>]]></content>
      <categories>
        <category>自己玩儿</category>
      </categories>
      <tags>
        <tag>assembly</tag>
        <tag>DOS</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-补码的来龙去脉</title>
    <url>/posts/about%20two&#39;s%20complement/</url>
    <content><![CDATA[<p>缘起：<br>
看王爽的《汇编语言》（第四版）9.2节关于jmp指令的介绍时，第180页涉及了<strong>以补码表示数进行运算</strong>，又一次想起自己似乎从来没理解过补码这个东西。本文试图从数学中同余的角度来理解补码的来龙去脉。</p>
<a id="more"></a>
<h2 id="原始问题"><a class="markdownIt-Anchor" href="#原始问题"></a> 原始问题</h2>
<p>已知：</p>
<ul>
<li>标号处的地址是一个偏移地址，相应二进制串解释为 无符号数</li>
<li>jmp指令后的第一个字节的地址，相应二进制串解释为 无符号数</li>
<li>jmp指令中的位移（8位或16位），相应二进制串解释为 有符号数</li>
</ul>
<p><strong>注：</strong><br>
给定一个二进制串，<strong>以下无符号数指二进制字符串最高位取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">+2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>翻译得到的十进制数；以下有符号数指二进制字符串最高位取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">-2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>翻译得到的十进制数</strong></p>
<p><strong>问题：</strong>（考虑加法和减法）</p>
<ul>
<li>两个操作数为无符号数，是否可以得到一个有符号数作为结果（计算的<strong>正当性</strong>）？若可以，结果是什么？如何说明其<strong>正确性</strong>？</li>
<li>操作数一个为无符号数，另一个为有符号数，两者可否作运算（计算的<strong>正当性</strong>）？若可以，结果是什么？如何说明其<strong>正确性</strong>？</li>
</ul>
<p>注：<br>
事实上，主要考虑最高位为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的二进制串，此时有解释为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">+2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">-2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>的二义性。最高位为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的二进制串是平凡的。</p>
<h2 id="预备知识"><a class="markdownIt-Anchor" href="#预备知识"></a> 预备知识</h2>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>位二进制数，可表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>个不同的数
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{0,\cdots, 2^{n}-1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span> 为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>的最小正缩系</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mo>−</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{-2^{n-1},\cdots,0,\cdots, 2^{n-1}-1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span> 为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>的最简剩余系</li>
</ul>
</li>
<li>下表中第二行、第三行左侧到右侧应当是一一映射。【同时具备这两种解释方式的【二进制与十进制之间的相互转换方式】】称为“补码”。<strong>所以补码应当是一种两个进制之间的转换方式或者说映射(当然这里的映射一词使用时并不是很严格符合数学上映射的定义)。</strong></li>
</ul>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>unsigned</td>
<td>最小正缩系</td>
</tr>
<tr>
<td>signed</td>
<td>最简缩系</td>
</tr>
</tbody>
</table>
<ul>
<li>在同余和补码的语义下，有符号数和无符号数是模<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>相等的。
<ul>
<li>即，无符号数在同余意义下等于有符号数，即无符号数和有符号数可以相互转化。</li>
<li>注：考虑同余是合理的，因为计算机中能存储的数的大小是有限的，这恰好与剩余系的特点对应。（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>位二进制串只能表达一个取定的剩余系——通常为最小正缩系或最简缩系，<strong>超过一个缩系中的部分会溢出，这就相当于数学中的取模运算</strong>）</li>
</ul>
</li>
<li>计算机中数皆以补码形式存放，并在补码的基础上进行加减法计算</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∪</mo><msup><mi mathvariant="double-struck">Z</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">{0}\cup \mathbb{Z}^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord"><span class="mord">0</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">Z</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 的 原码、反码、补码都一致</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="double-struck">Z</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">\mathbb{Z}^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">Z</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>的补码 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo></mrow><annotation encoding="application/x-tex">=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span></span></span> 其绝对值原码取反 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span></li>
</ul>
<h2 id="正当性和正确性-分析"><a class="markdownIt-Anchor" href="#正当性和正确性-分析"></a> 正当性和正确性 分析</h2>
<p>两个正数之间的加法是平凡的，有符号数和无符号数皆如此。此处提及有无符号是因为实际中需要考虑对应情况中 加法的定义域及相应的值域，以期避免溢出。</p>
<p><strong>对于减法，事实上我们不需要关心操作数是否有符号。</strong><br>
因为无符号数在同余意义下等于有符号数。所以所有运算最终都可化归至有符号数减去有符号数。</p>
<p><strong>对于减法的计算结果，</strong><br>
直觉上，我们认为 无符号数减去无符号数 结果应当是一个有符号数。更准确的说，这里得到的二进制串结果应当解释为一个有符号数。<br>
因为一个二进制数总可以解释为一个无符号数，即二进制到十进制转换由补码的定义可知二义性永远存在，所以重要的是我们根据情况<strong>选择</strong>对一个二进制串的正确解释方式即可。</p>
<h2 id="减法的核心难点借位"><a class="markdownIt-Anchor" href="#减法的核心难点借位"></a> 减法的核心难点——借位</h2>
<p><strong>核心思想</strong>：回避借位（这与被减数是否大于减数无关，例如：300-123也有借位）<br>
<strong>工具</strong>：同余、补数<br>
<strong>注</strong>：对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>的补数，即将x的最简缩系中的负数利用同余化到最小正缩系中。（详见《编码：隐匿在计算机软硬件背后的语言》P157页「<em>你可能听说过:“减一个数就等于加一个负数。”你可能会回答:“实际上还是减去了这个数。”然而，利用10的补数，我们将不会再用到减法。所有的步骤都用加法来进行。</em>
」）<br>
<strong>例子</strong>：<br>
以十进制为例：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>224</mn><mo>−</mo><mn>138</mn><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">[</mo><mn>224</mn><mo>+</mo><mo stretchy="false">(</mo><mn>999</mn><mo>−</mo><mn>138</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mn>1000</mn><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">[</mo><mn>224</mn><mo>+</mo><mn>861</mn><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mn>1000</mn><mspace linebreak="newline"></mspace><mo>=</mo><mn>1086</mn><mo>−</mo><mn>1000</mn><mspace linebreak="newline"></mspace><mo>=</mo><mn>86</mn></mrow><annotation encoding="application/x-tex">224-138\\
=[224+(999-138)+1]-1000\\
=[224+861+1]-1000\\
=1086-1000\\
=86</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">9</span><span class="mord">9</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord">6</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">8</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">6</span></span></span></span></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>999</mn><mo>−</mo><mn>138</mn></mrow><annotation encoding="application/x-tex">999-138</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span>先求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>138</mn></mrow><annotation encoding="application/x-tex">138</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn></mrow><annotation encoding="application/x-tex">9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span>的补数</li>
<li>通过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span> 将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>138</mn></mrow><annotation encoding="application/x-tex">138</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn></mrow><annotation encoding="application/x-tex">9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span>的补数转化为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>138</mn></mrow><annotation encoding="application/x-tex">138</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>的补数</li>
<li>事实上最后<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">-1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>的操作是多余的，因为这个取模的操作在计算机中以溢出的形式呈现，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1000</mn></mrow><annotation encoding="application/x-tex">1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>直接溢出，见不到它也就不需要再考虑它了</li>
</ul>
<p>同理，对二进制而言，</p>
<ul>
<li>先求一个串对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的补数，即<strong>反码</strong></li>
<li>再通过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span>转化为对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>的补数，即<strong>补码</strong></li>
</ul>
<p>事实上，</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>862</mn><mo>≡</mo><mo>−</mo><mn>138</mn><mo stretchy="false">(</mo><mspace></mspace><mspace width="0.6666666666666666em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>1000</mn><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">862\equiv -138 (\mod 1000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">6</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span><span class="mopen">(</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>
<ul>
<li><strong>求补数（二进制中称为补码）就是求同余</strong>，但是直接求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>138</mn></mrow><annotation encoding="application/x-tex">-138</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">3</span><span class="mord">8</span></span></span></span>关于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>的补数依旧涉及借位，因此分为两步，先<strong>求关于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn></mrow><annotation encoding="application/x-tex">9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span></span></span></span>的补数（没有借位）</strong>，再加一转化为对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>的补数</li>
<li>模数选取与进制选取有关，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1000</mn></mrow><annotation encoding="application/x-tex">1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>正好配十进制。话说十进制和二进制在表达上恰好很简洁，三进制或者二百三十三进制也可以有完全类似的行为，但看起来不是很直观。</li>
</ul>
</li>
</ul>
<h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2>
<h3 id="示例1"><a class="markdownIt-Anchor" href="#示例1"></a> 示例1</h3>
<p>考虑<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>位二进制数，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">n=8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>，可表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup><mo>=</mo><mn>256</mn></mrow><annotation encoding="application/x-tex">2^8=256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span>个数<br>
无符号数<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0000</mn><mo>−</mo><mn>0000</mn><mo>∼</mo><mn>1111</mn><mo>−</mo><mn>1111</mn><mo>→</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>255</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">0000-0000 \sim 1111-1111 \rightarrow [0,255]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span><span class="mclose">]</span></span></span></span></p>
<p>有符号数<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1000</mn><mo>−</mo><mn>0000</mn><mo>∼</mo><mn>1111</mn><mo>−</mo><mn>1111</mn><mo>→</mo><mo stretchy="false">[</mo><mo>−</mo><mn>128</mn><mo separator="true">,</mo><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">1000-0000 \sim 1111-1111 \rightarrow [-128,-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">]</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0000</mn><mo>−</mo><mn>0000</mn><mo>∼</mo><mn>0111</mn><mo>−</mo><mn>1111</mn><mo>→</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>127</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">0000-0000 \sim 0111-1111 \rightarrow [0,127]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span><span class="mclose">]</span></span></span></span><br>
对于有符号数同样可以想象一个数轴，自左<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1000</mn><mo>−</mo><mn>0000</mn></mrow><annotation encoding="application/x-tex">1000-0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>向右以步长为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>递增至<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0111</mn><mo>−</mo><mn>1111</mn></mrow><annotation encoding="application/x-tex">0111-1111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span></span></span></span></p>
<h3 id="示例2"><a class="markdownIt-Anchor" href="#示例2"></a> 示例2</h3>
<p>以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>位二进制串为例，考察 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>224</mn><mo>−</mo><mn>160</mn></mrow><annotation encoding="application/x-tex">224-160</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>160</mn><mo>−</mo><mn>224</mn></mrow><annotation encoding="application/x-tex">160-224</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>224</mn><mo>−</mo><mn>160</mn><mo>≡</mo><mo>−</mo><mo stretchy="false">(</mo><mn>256</mn><mo>−</mo><mn>224</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>256</mn><mo>−</mo><mn>160</mn><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>32</mn><mo>+</mo><mn>96</mn><mo>=</mo><mn>64</mn><mspace></mspace><mspace width="0.6666666666666666em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mspace></mrow><annotation encoding="application/x-tex">224-160\equiv -(256-224)+(256-160) = -32+96 = 64 \mod 2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>160</mn><mo>−</mo><mn>224</mn><mo>≡</mo><mo>−</mo><mo stretchy="false">(</mo><mn>256</mn><mo>−</mo><mn>160</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>256</mn><mo>−</mo><mn>224</mn><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>96</mn><mo>+</mo><mn>32</mn><mo>=</mo><mo>−</mo><mn>64</mn><mspace></mspace><mspace width="0.6666666666666666em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mspace></mrow><annotation encoding="application/x-tex">160-224\equiv -(256-160)+(256-224) = -96+32 = -64\mod 2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">9</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">6</span><span class="mord">4</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li>起初两个无符号数作减法</li>
<li>（中间两步）通过求对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 的补数转化为有符号数(示例二中两个式子为了简洁和直观写的都是十进制数，实际上在计算机中，每个数皆为补码形式存放的二进制串，所以最后的模数也是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span> )</li>
<li>最终得到两个有符号数作为结果</li>
<li>加上256或减去256不影响计算，因为这在计算机中是一个溢出了的数</li>
</ul>
]]></content>
      <categories>
        <category>自己玩儿</category>
      </categories>
      <tags>
        <tag>Computer organization</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言（第四版）-王爽 (题解)-1</title>
    <url>/posts/masm-wangshuang-exercise-1/</url>
    <content><![CDATA[<p>本书一至十章的部分习题\代码题记录</p>
<a id="more"></a>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a href="https://www.cnblogs.com/Mayfly-nymph/p/12046088.html">《汇编语言》（王爽）课后答案 - Hk_Mayfly - 博客园</a></p>
<h2 id="注"><a class="markdownIt-Anchor" href="#注"></a> 注</h2>
<p>实验代码如果用notepad++等记事本写的，<strong>应当将文件的编码格式保存为utf-8，其它编码格式保存的文件会在编译的时候报莫名其妙的错</strong></p>
<h2 id="ch6"><a class="markdownIt-Anchor" href="#ch6"></a> CH6</h2>
<h3 id="实验5"><a class="markdownIt-Anchor" href="#实验5"></a> 实验5</h3>
<p>(2).4 该段实际占有的空间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mfrac><mi>N</mi><mn>16</mn></mfrac><mo stretchy="false">⌉</mo><mo>×</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">\lceil \frac{N}{16}\rceil\times 16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span></span></span></span>，
即一个段会自动对齐成16字节的倍数</p>
<p>(5)<strong>不应该把段寄存器ss当作一个存段地址的寄存器来用，也不应该把栈段当作数据段来用（见P195检测点10.5）。这都不符合代码规范！</strong> 此外，debug时，定义一个栈段后，栈空间会被debug程序用于保存现场！所以如果简单把一个数据段通过ss寄存器定义为一个栈段在debug模式下的单步调试中会导致数据段中的数据丢失！<strong>（第(6)题同理）</strong> (debug程序如何使用栈空间见课本p250，和本文第十二章部分的笔记。)</p>
<p>因为这里数据都是静态的、固定的，所以考虑用偏移来解题比较简单。
即标号b的地址为<code>a+10H</code>，标号c的地址为<code>a+20H</code></p>
<p>注意运算过程中选择合适大小的寄存器</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">a <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span></span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span></span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">c <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">c ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol"> start:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,a</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span> <span class="comment">;offset</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span> <span class="comment">;counter</span></span><br><span class="line">  </span><br><span class="line"><span class="symbol"> s:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">dl</span>,<span class="number">0</span>[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">dl</span>,<span class="number">16</span>[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="number">32</span>[<span class="built_in">bx</span>],<span class="built_in">dl</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">loop</span> s</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验5-5.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验5-5运行结果</div>
</center>
<p>(6)<br>
<strong>题目要求</strong>：用<code>push指令</code>将a段中的前8个字型数据，逆序存储到b段中。<br>
<strong>分析</strong>：题中说用<code>push指令</code>只是提示我们可以利用本章学的栈段作过渡工具。并非是让我们直接将<code>b segment</code>同时定义为数据段和栈段。
因此尽管利用栈从高地址向低地址存储的特性，将<code>b segment</code>定义为栈段可以直接完成题目逆序存储的要求。但这是完全不对的！  <strong>存储数据的地方应当是数据段，而数据段不应该同时被定义为一个栈段。</strong><br>
<strong>正确解题思路</strong>：定义一个栈段，将数据先全部存入栈段完成逆序，然后再完全弹出至目标存储地址。即需要遍历待搬运数据两次。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">a <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0ah</span>,<span class="number">0bh</span>,<span class="number">0ch</span>,<span class="number">0dh</span>,<span class="number">0eh</span>,<span class="number">0fh</span>,<span class="number">0ffh</span></span><br><span class="line">a ends</span><br><span class="line"></span><br><span class="line">b <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">b ends</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,a</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> s:</span></span><br><span class="line">  <span class="keyword">push</span> [<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">loop</span> s</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,b</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol"> s0:</span></span><br><span class="line">  <span class="keyword">pop</span> [<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">loop</span> s0</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验5-6.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验5-6运行结果</div>
</center>
<h2 id="ch7"><a class="markdownIt-Anchor" href="#ch7"></a> CH7</h2>
<h3 id="实验6"><a class="markdownIt-Anchor" href="#实验6"></a> 实验6</h3>
<p>(2)注意细节，</p>
<ul>
<li>比如起始地址下标从0开始数；</li>
<li>数据段中的单词如果不手动用空格对齐至16字节，是不会有任何形式的自动对齐的，<strong>所以要手动打上空格，便于后续的寻址操作。</strong></li>
</ul>
<p>完整代码如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ss</span>:stack, <span class="built_in">ds</span>:data</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;1. display      &#x27;</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;2. brows        &#x27;</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;3. replace      &#x27;</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;4. modify       &#x27;</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol"> start:</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data <span class="comment">;initialize reg ds</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack <span class="comment">;initialize a stack</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span> <span class="comment">; row counter</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">4</span> <span class="comment">; counter for outer loop</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> s:</span>  <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">4</span> <span class="comment">; counter for inner loop</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">0</span> <span class="comment">; column counter</span></span><br><span class="line">  </span><br><span class="line"><span class="symbol">  s0:</span> </span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">al</span>,[<span class="built_in">bx</span>+<span class="built_in">di</span>+<span class="number">3</span>] <span class="comment">;lowercase2uppercase</span></span><br><span class="line">   <span class="keyword">and</span> <span class="built_in">al</span>,<span class="number">11011111b</span></span><br><span class="line">   <span class="keyword">mov</span> [<span class="built_in">bx</span>+<span class="built_in">di</span>+<span class="number">3</span>],<span class="built_in">al</span></span><br><span class="line">   <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line">   <span class="keyword">loop</span> s0</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">16</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">loop</span> s</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验6.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验6运行结果</div>
</center>
<h2 id="ch8"><a class="markdownIt-Anchor" href="#ch8"></a> CH8</h2>
<h3 id="实验7"><a class="markdownIt-Anchor" href="#实验7"></a> 实验7</h3>
<p>说明：数据段中有三类数据：年份（字节型），收入（双字型），雇员数（字型）。</p>
<ul>
<li>“年份”每一项为字节型字符串，即每一个数据项占<code>4*1B=4B</code></li>
<li>“收入”每一项为双字型，即每一个数据项占<code>1*4B=4B</code></li>
<li>“雇员数”每一项为字型，即每一个数据项占<code>1*2B=2B</code></li>
</ul>
<p>用bx寄存器存储每一个数据项相对于该类数据起始地址的偏移地址，又因为<code>mul</code>指令和<code>div</code>指令用起来都比较麻烦，所以bx的步长取最小的数据项（雇员类）即在最后每次加2字节，然后对于“年份”和“收入”这俩每项数据占4个字节的，通过计算<code>add bx,bx</code>实现<code>bx*2</code>得到这两类数据相对起点的偏移。</p>
<p><strong>这里偏移地址、相对地址、基址的计算是比较重要的，如果哪一个部分算错，导致写入（搬运数据）时覆盖了代码段则会死机。</strong></p>
<p>完整代码如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;1975&#x27;</span>,<span class="string">&#x27;1976&#x27;</span>,<span class="string">&#x27;1977&#x27;</span>,<span class="string">&#x27;1978&#x27;</span>,<span class="string">&#x27;1979&#x27;</span>,<span class="string">&#x27;1980&#x27;</span>,<span class="string">&#x27;1981&#x27;</span>,<span class="string">&#x27;1982&#x27;</span>,<span class="string">&#x27;1983&#x27;</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;1984&#x27;</span>,<span class="string">&#x27;1985&#x27;</span>,<span class="string">&#x27;1986&#x27;</span>,<span class="string">&#x27;1987&#x27;</span>,<span class="string">&#x27;1988&#x27;</span>,<span class="string">&#x27;1989&#x27;</span>,<span class="string">&#x27;1990&#x27;</span>,<span class="string">&#x27;1991&#x27;</span>,<span class="string">&#x27;1992&#x27;</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;1993&#x27;</span>,<span class="string">&#x27;1994&#x27;</span>,<span class="string">&#x27;1995&#x27;</span></span><br><span class="line">  <span class="comment">;以上是表示21年的21个字符串</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">16</span>,<span class="number">22</span>,<span class="number">382</span>,<span class="number">1356</span>,<span class="number">2390</span>,<span class="number">8000</span>,<span class="number">16000</span>,<span class="number">24486</span>,<span class="number">50065</span>,<span class="number">97479</span>,<span class="number">140417</span>,<span class="number">197514</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">345980</span>,<span class="number">590827</span>,<span class="number">803530</span>,<span class="number">1183000</span>,<span class="number">1843000</span>,<span class="number">2759000</span>,<span class="number">3753000</span>,<span class="number">4649000</span>,<span class="number">5937000</span></span><br><span class="line">  <span class="comment">;以上是表示21年公司总收入的21个dword型数据</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">130</span>,<span class="number">220</span>,<span class="number">476</span>,<span class="number">778</span>,<span class="number">1001</span>,<span class="number">1442</span>,<span class="number">2258</span>,<span class="number">2793</span>,<span class="number">4037</span>,<span class="number">5635</span>,<span class="number">8226</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">11542</span>,<span class="number">14430</span>,<span class="number">15257</span>,<span class="number">17800</span></span><br><span class="line">  <span class="comment">;以上是表示21年公司雇员人数的21个word型数据</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="number">21</span> dup (<span class="string">&#x27;year summ ne ?? &#x27;</span>)</span><br><span class="line">table ends</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span> <span class="comment">;reg会不够用，所以需要定义一个栈暂存数据</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">8</span> dup (<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,table <span class="comment">;用一个段寄存器存table的地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span>  <span class="comment">;源数据地址相对基址的偏移地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">0</span>  <span class="comment">;目的地址的偏移</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">21</span>  <span class="comment">;循环计数器</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> s:</span> </span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">cx</span>  <span class="comment">;将循环计数器的值入栈后，可将cx继续当作临时reg使用</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;搬运年份</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">bx</span>  </span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>+<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>+<span class="number">2</span>],<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;搬运收入</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="built_in">bx</span> <span class="comment">;</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">84</span> <span class="comment">;这是基址</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">5</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,[<span class="built_in">bx</span>+<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>+<span class="number">2</span>],<span class="built_in">dx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;搬运雇员数</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">168</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">5</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;计算人均收入并存储在指定位置</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">3</span></span><br><span class="line">  <span class="keyword">div</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">ax</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;计算步长</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">3</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span> <span class="comment">;详见前面说明</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">loop</span> s</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验7.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验7运行结果</div>
</center>
<p>反思总结：<br>
相较于参考资料答案中给出的代码，我的代码用了更少的寄存器（没有用bp和si寄存器）并且通过展平减少了一重循环，更好的利用了设置的栈，此外，在地址的计算上更依赖于数数上的技巧使得代码不是很直观且容易出错。
如果充分利用bp和si寄存器，并且颠倒一下搬运数据的顺序代码可以更简洁，不过懒得搞了，大概是这么个意思。</p>
<h2 id="ch9"><a class="markdownIt-Anchor" href="#ch9"></a> CH9</h2>
<h3 id="检测点91"><a class="markdownIt-Anchor" href="#检测点91"></a> 检测点9.1</h3>
<p>这里 <code>mov [bx+2],cs</code> 等效于 <code>add ax,1 mov [bx+2],ax</code> 这两条指令合并的效果，但是题目只给了一行，所以不能用后面的写法。主要是x86里各种指令的操作对象允许的不同，但这里是<code>mov</code> 的操作数是可以有段寄存器cs的</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">12345678h</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> [<span class="built_in">bx</span>],<span class="built_in">bx</span></span><br><span class="line"> <span class="keyword">mov</span> [<span class="built_in">bx</span>+<span class="number">2</span>],<span class="built_in">cs</span></span><br><span class="line"> <span class="keyword">jmp</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0</span>]</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h3 id="实验8"><a class="markdownIt-Anchor" href="#实验8"></a> 实验8</h3>
<p>注：</p>
<ul>
<li><code>jmp short 标号</code> 占两个字节</li>
<li><code>nop</code> 指令占一个字节</li>
</ul>
<p>源程序中的代码<code>jmp short s1</code>具有迷惑性，不能被骗了。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">di</span>,offset s</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">si</span>,offset s2</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">cs</span>:[<span class="built_in">si</span>]</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">cs</span>:[<span class="built_in">di</span>],<span class="built_in">ax</span></span><br></pre></td></tr></table></figure>
<p>这段代码的主要用处是将s2处的第一条指令搬到s处。要注意这个搬运是<strong>在程序运行时发生</strong>的，而程序运行<strong>前</strong>需要经过<strong>编译</strong>、连接，所以搬运的不是原始代码中的指令<code>jmp short s1</code>，而是编译后的结果<code>EBF6</code>。</p>
<p><code>EB</code>对应<code>jmp</code>指令，<code>F6</code>即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">-10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span></span></span></span>，所以标号s处的指令为<code>EBF6</code>，考虑到 <code>位移=标号处的地址-jmp指令后的第一个字节的地址</code>，所以标号s处的 <code>EBF6</code> 执行完后 <code>IP=0000</code>，恰好指向开头的 <code>mov ax,4c00h</code>。</p>
<p>所以程序可以正常结束。</p>
<h3 id="实验9"><a class="markdownIt-Anchor" href="#实验9"></a> 实验9</h3>
<ul>
<li>好吧，参考资料这题好像写的比我简洁... &gt; &lt;|||</li>
<li>先实现一个颜色的，三个颜色就在此基础上外面再套一层循环。</li>
<li><strong>选择恰当的寄存器，操作8位数据时应该用8位寄存器。</strong> 如果用16位寄存器，会导致写入多余数据（即将高八位数据也写入内存或者其它寄存器中），将引起不必要的麻烦。</li>
</ul>
<p>完整代码如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code, <span class="built_in">ds</span>:data</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span> </span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;welcome to masm!&#x27;</span> <span class="comment">;共16个字节（包括空格，空格也是字符！）</span></span><br><span class="line"> <span class="built_in">db</span> <span class="number">02h</span>,<span class="number">24h</span>,<span class="number">71h</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span> <span class="comment">;搞个栈暂存数据，后面要腾挪寄存器</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">8</span> dup(<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0b800h</span> <span class="comment">;页首，立即数开头若是字母需补0</span></span><br><span class="line"> <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="number">0078h</span> <span class="comment">;从第12行开始打印。计算行偏移加在段地址上，加在段地址上的偏移需除以16！第零行占160字节但是不显示，所以780h=160B*12(详见参考资料)</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span>  <span class="comment">;存放最终段地址</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;一共三种颜色搞3行</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">3</span></span><br><span class="line"><span class="symbol"> s3:</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">64</span>  <span class="comment">;计算列偏移作为偏移地址</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">16</span> <span class="comment">;以下循环 将要输出的内容从data段搬运到显示缓冲区，并调整颜色</span></span><br><span class="line"><span class="symbol">  s:</span></span><br><span class="line">   <span class="keyword">push</span> <span class="built_in">cx</span> <span class="comment">;暂存cx，因为后面还要用到cx寄存器进行跳转</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">;搬运内容</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">ds</span>:[<span class="built_in">si</span>]</span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">al</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">;操作属性</span></span><br><span class="line">   <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line">   <span class="comment">;从栈中取外层循环计数器数值</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">bp</span>,<span class="built_in">sp</span> </span><br><span class="line">   <span class="keyword">add</span> <span class="built_in">bp</span>,<span class="number">2</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">bp</span>,<span class="built_in">ss</span>:[<span class="built_in">bp</span>] </span><br><span class="line">   <span class="comment">;3 - 外层counter = 颜色index</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">3</span></span><br><span class="line">   <span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="built_in">bp</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">bp</span>,<span class="built_in">ax</span></span><br><span class="line">   <span class="comment">;读取颜色数据</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">ds</span>:[<span class="built_in">bp</span>+<span class="number">16</span>] <span class="comment">;用一个字节表示属性，所以此处用8位寄存器，16为字符串的大小</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">al</span> </span><br><span class="line">  <span class="comment">;处理步长</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">di</span>  <span class="comment">;目标数据偏移地址+1，属性占用的字节在操作属性时加过了</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span>  <span class="comment">;源数据偏移+1</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span>  <span class="comment">;还原循环变量</span></span><br><span class="line">  <span class="keyword">loop</span> s  <span class="comment">;对下一个源数据操作</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">es</span></span><br><span class="line"> <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="number">0ah</span> <span class="comment">;增加一行即+0a0h，因为是对段地址操作，所以要将0a0除以16，所以这里加0ah</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span> <span class="comment">;段寄存器+1，处理下一行</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span> <span class="comment">;从头读取数据</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"> <span class="keyword">loop</span> s3</span><br><span class="line"> </span><br><span class="line"> <span class="comment">;操作完成，程序返回</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"> </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验9.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验9运行结果</div>
</center>
<h2 id="ch10"><a class="markdownIt-Anchor" href="#ch10"></a> CH10</h2>
<h3 id="实验10"><a class="markdownIt-Anchor" href="#实验10"></a> 实验10</h3>
<h4 id="1-显示字符串"><a class="markdownIt-Anchor" href="#1-显示字符串"></a> 1. 显示字符串</h4>
<ul>
<li>**选择恰当的寄存器！**使用<code>ax,bx,cx,dx</code>时应考虑选择8位版本，还是16位版本。尤其是搭配<code>mul</code>指令和<code>div</code>指令时。当然，不恰当的寄存器选择，即使只是加减法也会引发各种bug。</li>
<li>使用栈之前当然还是要自己定义栈段啊！</li>
</ul>
<p>完整代码如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;名称: show_str</span></span><br><span class="line"><span class="comment">;功能：在指定的位置，用指定的颜色，显示一个用0结束的字符串</span></span><br><span class="line"><span class="comment">;参数： (dh)=行号(取值范围0~24), </span></span><br><span class="line"><span class="comment">;  (dl)=列号(取值范围0~79)</span></span><br><span class="line"><span class="comment">;  (cl)=颜色, </span></span><br><span class="line"><span class="comment">;  ds:si 指向字符串的首地址</span></span><br><span class="line"><span class="comment">;返回：无</span></span><br><span class="line"><span class="comment">;test_data: 在屏幕8行3列处，用绿色显示data段中的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;welcome to masm!&#x27;</span>,<span class="number">0</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">8</span> dup(<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="comment">;定义一个栈段</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">16</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;传参</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="number">dh</span>,<span class="number">12</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">33</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">call</span> show_str</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol">show_str:</span></span><br><span class="line"> <span class="comment">;用栈保存现场</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">di</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">es</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;先计算行偏移地址，再加到页首起始地址上，存放在es段寄存器中</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="number">0ah</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="number">dh</span></span><br><span class="line"> <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="number">0b800h</span> <span class="comment">;0b800h是显存的起始地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;计算列偏移地址。列偏移地址的起始地址 是 列号*2-2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">dl</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="built_in">bl</span> </span><br><span class="line"> <span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;暂存颜色属性</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">cl</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> prt:</span></span><br><span class="line"> <span class="comment">;按要求搬运内容至显存指定位置，以指定格式输出</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="number">ch</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">ds</span>:[<span class="built_in">si</span>]</span><br><span class="line"> <span class="keyword">jcxz</span> ok  <span class="comment">;若cx==0，子程序运行结束</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">cl</span> <span class="comment">;搬运字符</span></span><br><span class="line"> <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">al</span> <span class="comment">;搬运属性</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;处理步长</span></span><br><span class="line"> <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line"> <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">jmp</span> short prt</span><br><span class="line"> </span><br><span class="line"><span class="symbol"> ok:</span></span><br><span class="line"> <span class="comment">;恢复现场</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">es</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">di</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">ret</span> <span class="comment">;返回</span></span><br><span class="line"> </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验10-1显示字符串.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验10-1显示字符串</div>
</center>
<h4 id="2-解决除法溢出的问题"><a class="markdownIt-Anchor" href="#2-解决除法溢出的问题"></a> 2. 解决除法溢出的问题</h4>
<ul>
<li>计算公式第一部分<code>int(H/N)</code>时，<strong>注意</strong>应把被除数的高位(H)放在<code>ax</code>中，然后将<code>dx</code>置0，然后进行除数为16位的除法。此时得到的商存放在<code>ax</code>中，为最终要求的结果的高16位；余数在<code>dx</code>中即为下一部分运算所需的<code>rem(H/N)*65536</code>。</li>
</ul>
<p>完整代码如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;name:divdw</span></span><br><span class="line"><span class="comment">;function: 进行不会产生溢出的除法运算，被除数为dword型，除数为word型，结果为dword型</span></span><br><span class="line"><span class="comment">;parameter: (ax)=dword型数据的低16位</span></span><br><span class="line"><span class="comment">;   (dx)=dword型数据的高16位</span></span><br><span class="line"><span class="comment">;   (cx)=除数</span></span><br><span class="line"><span class="comment">;return: (ax)=结果的低16位</span></span><br><span class="line"><span class="comment">;   (dx)=结果的高16位</span></span><br><span class="line"><span class="comment">;   (cx)=余数</span></span><br><span class="line"><span class="comment">;test_data F4240H/0AH=0001H 86A0H ... 0</span></span><br><span class="line"><span class="comment">;notation: X: 被除数</span></span><br><span class="line"><span class="comment">;  N: 除数</span></span><br><span class="line"><span class="comment">;  H: X高16位</span></span><br><span class="line"><span class="comment">;  L: X低16位</span></span><br><span class="line"><span class="comment">;  int: 去尾取整</span></span><br><span class="line"><span class="comment">;  rem: 取余数</span></span><br><span class="line"><span class="comment">;equation: X/N=int(H/N)*65536+(rem(H/N)*65536+L)/N</span></span><br><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">8</span> dup(<span class="number">0</span>)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">32</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4240h</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">000fh</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0ah</span></span><br><span class="line"> <span class="keyword">call</span> divdw</span><br><span class="line"></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">divdw:</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="built_in">ax</span> <span class="comment">; save L</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;compute int(H/N) </span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">dx</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">div</span> <span class="built_in">cx</span> <span class="comment">; quotient in ax, remainder in dx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">ax</span> <span class="comment">;计算结果的高16位入栈保存</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;compute (rem(H/N)*65536+L)/N</span></span><br><span class="line"> <span class="comment">;从bx中取回X低16位(L)</span></span><br><span class="line"> <span class="comment">;rem(H/N)已经在dx中，因为dx是被除数的高16位，所以相当于乘了65536</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">bx</span></span><br><span class="line"> <span class="keyword">div</span> <span class="built_in">cx</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;在指定寄存器中存储结果</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="built_in">dx</span></span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">ret</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验10-2解决除法溢出的问题.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验10-2解决除法溢出的问题</div>
</center>
<h4 id="3数值显示"><a class="markdownIt-Anchor" href="#3数值显示"></a> 3.数值显示</h4>
<ul>
<li>
<p>compute段，计算过程中先得到十进制表示中的最低位后得到最高位，直接输出是低位在左的逆序结果，希望按照高位在左的形式输出。</p>
</li>
<li>
<p>利用栈调整逆序。<strong>注意入栈出栈每次操作单位为一个字（两个字节）。</strong> 分析可知本题得到的余数数据位于低八位。</p>
</li>
<li>
<p>除法过程中，<strong>先将余数入栈</strong>，再判断商是否为0决定是进行下一轮除法还是下一步的其它操作。</p>
</li>
<li>
<p>出栈时，一次出栈两个字节。本题仅用到低8位。</p>
</li>
</ul>
<p>完整代码如下</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">;name: dtoc_w</span></span><br><span class="line"><span class="comment">;function: 将word型数据转变为表示十进制数的字符串，字符串以0为结尾符</span></span><br><span class="line"><span class="comment">;parameter: (ax)=word型数据</span></span><br><span class="line"><span class="comment">;   ds:si指向字符串的首地址</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line"><span class="comment">;application: 将数据12666以十进制的形式在屏幕的8行3列，用黑底绿字显示出来。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">10</span> dup(<span class="number">0</span>)</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">8</span> dup(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">sp</span>,<span class="number">32</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">12666</span></span><br><span class="line"> <span class="keyword">call</span> dtoc_w</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="number">dh</span>,<span class="number">8</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">3</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">call</span> show_str</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"> <span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol">dtoc_w:</span></span><br><span class="line"> <span class="comment">;保存现场</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;initialize cx,bx</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">10</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;字符串以0为结尾符,应该放在栈底</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> compute:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">div</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">dx</span>,<span class="number">30h</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">jcxz</span> save2data <span class="comment">;quotient==0, conversion ends</span></span><br><span class="line">  <span class="keyword">jmp</span> compute</span><br><span class="line"> </span><br><span class="line"><span class="symbol"> save2data:</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">bl</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">si</span>],<span class="built_in">cl</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">jcxz</span> ok_dtoc_w</span><br><span class="line">  <span class="keyword">jmp</span> save2data</span><br><span class="line"> </span><br><span class="line"> <span class="comment">;恢复现场并返回</span></span><br><span class="line"><span class="symbol"> ok_dtoc_w:</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line">  <span class="keyword">ret</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol">show_str:</span> </span><br><span class="line"> <span class="comment">;用栈保存现场</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;先计算行偏移地址，再加到页首起始地址上，存放在es段寄存器中</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="number">0ah</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="number">dh</span></span><br><span class="line"> <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="number">0b800h</span> <span class="comment">;0b800h是显存的起始地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;计算列偏移地址。列偏移地址的起始地址 是 列号*2-2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">dl</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="built_in">bl</span> </span><br><span class="line"> <span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;暂存颜色属性</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">cl</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> prt:</span></span><br><span class="line">  <span class="comment">;按要求搬运至显存指定位置，以指定格式输出</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="number">ch</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">ds</span>:[<span class="built_in">si</span>]</span><br><span class="line">  <span class="keyword">jcxz</span> ok_show_str  <span class="comment">;若cx==0，子程序运行结束</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">cl</span> <span class="comment">;搬运字符</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">al</span> <span class="comment">;搬运属性</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;处理步长</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">jmp</span> short prt</span><br><span class="line"> </span><br><span class="line"><span class="symbol"> ok_show_str:</span></span><br><span class="line">  <span class="comment">;恢复现场</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">ret</span> <span class="comment">;返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/实验10-3数值显示.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">实验10-3数值显示</div>
</center>
<h3 id="课程设计1"><a class="markdownIt-Anchor" href="#课程设计1"></a> 课程设计1</h3>
<h4 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h4>
<ul>
<li>预处理操作将每一年的所有数据项<strong>之间</strong>的0换成空格</li>
<li>set space 将每一年的所有数据开始<strong>之前</strong>和结束<strong>之后</strong>的地方换成空格</li>
<li>每年数据除本身字符所占的字节数外，空格数是自己定义的，我按课本P173实验7的方式规划了一下，确保每年数据占32位，这样也比较整齐</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>年份</th>
<th>空格</th>
<th>收入</th>
<th>空格</th>
<th>雇员数</th>
<th>空格</th>
<th>人均收入</th>
<th>空格</th>
</tr>
</thead>
<tbody>
<tr>
<td>下标</td>
<td>0-3</td>
<td>4-7</td>
<td>8-14</td>
<td>15-18</td>
<td>19-23</td>
<td>24-27</td>
<td>28-30</td>
<td>31</td>
</tr>
<tr>
<td>大小</td>
<td>4B</td>
<td>4B</td>
<td>7B</td>
<td>4B</td>
<td>5B</td>
<td>4B</td>
<td>3B</td>
<td>1B</td>
</tr>
</tbody>
</table>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/课设1-结构图.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">课设1-结构图</div>
</center>
<h4 id="总结注意事项"><a class="markdownIt-Anchor" href="#总结注意事项"></a> 总结(注意事项)</h4>
<ul>
<li>
<p>定义域、值域、操作的基本单位</p>
<ul>
<li>
<p>定义域、值域问题实际上也是<strong>边界问题</strong></p>
<ul>
<li>边界问题还包括<strong>终止性的定界符</strong>，比如字符串以0为结尾符的约定</li>
</ul>
</li>
<li>
<p>每一个程序的输入、输出的取值范围(是否会<strong>溢出</strong>)</p>
<ul>
<li>课本p212页提示有些要显示的数据已经<strong>大于</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>65535</mn></mrow><annotation encoding="application/x-tex">65535</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">5</span><span class="mord">5</span><span class="mord">3</span><span class="mord">5</span></span></span></span> ——具体来说就是第二列收入数据，需要一个新的字符串转化子程序。
<ul>
<li>上述子程序，需要调用实验10.2中的<strong>没有溢出的除法</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p>每一个操作(没有显性)修改的寄存器，需注意寄存器之间的数据依赖关系</p>
<ul>
<li>16位乘除法中，对 <code>dx</code> 的修改(将写覆盖dx中原先保存的值)</li>
<li><code>loop</code> 循环中，对寄存器 <code>cx</code> 中数据的使用</li>
</ul>
</li>
<li>
<p>操作的基本单位</p>
<ul>
<li>例如入栈、出栈操作的基本单位是<strong>字</strong>。
<ul>
<li>注意是否会引起不必要的数据入栈或者出栈。（通过初始化寄存器解决入栈的数据问题，通过正常使用栈解决出栈问题。）</li>
<li><strong>不要</strong>试图通过每次入栈后调整栈顶指针实现按字节入栈（出栈同理）。这可能因操作不当引发写覆盖。也可能导致在最后一次出栈的时候出栈了其它无关的数据等，总之，会引起不必要的麻烦。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>寄存器</p>
<ul>
<li>有些 <code>reg</code>有默认的<code>sreg</code>，所以最好都显示写出来
<ul>
<li><code>bx、si、di</code> 的默认段寄存器是 <code>ds</code></li>
<li><code>bp</code> 的默认段寄存器是 <code>ss</code></li>
</ul>
</li>
<li><strong>选择恰当的寄存器</strong>
<ul>
<li>16位加减法或 <code>mov</code> 操作中，对可能并不需要的高8位会产生影响</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>初始化和保存现场</strong>都是好习惯</p>
<ul>
<li>使用寄存器前应当先初始化
<ul>
<li>初始化前利用栈备份寄存器的值</li>
</ul>
</li>
<li><strong>内存初始化</strong>，即 <code>data segment, stack segment等</code> 的初始化
<ul>
<li>注意 <code>dup</code> 的语法格式</li>
</ul>
</li>
<li><strong>显存也要初始化</strong>，不然会打印很多乌七八糟的奇怪的东西出来。或者可能打印不出来，或者可能死机。</li>
<li>所有子程序中用到的寄存器都应该在子程序开头顺序入栈，子程序结尾逆序出栈。<strong>在子程序执行过程中不应该修改调用者赋予寄存器的值</strong>，除非该子程序对指定寄存器有返回值
<ul>
<li>事实上在一段代码中间，因为寄存器有限，所以将寄存器作为临时寄存器使用时也应注意利用栈保存现场。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>选择合适的寻址方式</p>
<ul>
<li>合适的寻址方式可以让程序更清晰，代码更简洁</li>
<li>如果代码写的太长，<code>loop</code> 的时候会报错说跳转超过范围(-128~127)</li>
</ul>
</li>
<li>
<p>相关语法细节</p>
<ul>
<li>注意<code>dup</code> 的语法格式。实际上<code>dup(0,0,0,0)</code>这样的写法和c语言初始化数组的写法是类似的</li>
<li><code>loop s</code> 指令等价于 <code>cx-=1, if ((cx)!=0) jmp s</code> ；而 <code>jcxz s</code> 指令等价于<code>if ((cx)==0) jmp s</code> 。这两条指令不可混淆。</li>
</ul>
</li>
<li>
<p>显存</p>
<ul>
<li><strong>显存也要初始化</strong>，不然会打印很多乌七八糟的奇怪的东西出来。或者可能打印不出来，或者可能死机。</li>
<li>涉及显存的debug需将行号设置的大一些，不然头几行屏幕上显示不出来，这是因为dos中debug每执行一次t操作所附带的几行寄存器相关信息的输出将覆盖掉我们自己写的输出。同理，也可能导致输出一闪而过等。可以先将 (搬运内容至显存的整个循环) 执行，看一下情况，再具体单步调试。</li>
<li>往显存写入的时候，应该先写入属性，再写入字符，先变个色比较便于确认位置。</li>
</ul>
</li>
<li>
<p>数学问题</p>
<ul>
<li>行号和列号的计算见课本实验7，以及文首参考资料中实验7中关于第0行的说明</li>
<li>进制转换</li>
<li>divdw的设计中用到的思路及公式见课本实验10-2</li>
</ul>
</li>
<li>
<p>反思(吐槽)</p>
<ul>
<li>程序设计
<ul>
<li>一个操作到底应该放在哪里执行——由调用者执行，还是某个子程序执行，还是单独再写一个子程序执行，这是一个哲学问题，主要应当从<strong>函数的可复用性</strong>来考虑设计，也即模块化设计。模块化设计就要求通用性，应当便于别人使用，不能在计数上偷懒瞎搞(瞎搞并不是奇技淫巧！不能玷污奇技淫巧！)。
<ul>
<li>以<code>show_str</code>函数为例。<br>
对于每一年数据中间的空白处由0置成空格应由调用者保证，即每一年的所有数据构成一个字符串。因为要打印的数据应该由调用者遵照子程序接口提供，而这里的接口是只有字符串结尾处才应该有结束符，字符串中间的子串之间不应当出现结尾符0。<br>
对于每一年数据开始之前和结尾之后的空白处置0应在<code>show_str</code>中实现，因为屏幕上默认只应有需要的字符串，其它位置的显存初始化应当由打印函数进行封装。</li>
</ul>
</li>
<li>写一个函数的具体实现前，养成习惯先写<strong>名字、功能、参数、返回值</strong>。</li>
</ul>
</li>
<li>从利用栈保存现场和恢复现场的角度来看，难怪c语言有形参和实参的问题(即修改复制的那一份值而不是调用者的变量所在地址存储的值)；c++有浅拷贝和深拷贝的问题；听说python也有...</li>
</ul>
</li>
</ul>
<h4 id="完整代码如下"><a class="markdownIt-Anchor" href="#完整代码如下"></a> 完整代码如下</h4>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">assume</span> <span class="built_in">cs</span>:code</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;1975&#x27;</span>,<span class="string">&#x27;1976&#x27;</span>,<span class="string">&#x27;1977&#x27;</span>,<span class="string">&#x27;1978&#x27;</span>,<span class="string">&#x27;1979&#x27;</span>,<span class="string">&#x27;1980&#x27;</span>,<span class="string">&#x27;1981&#x27;</span>,<span class="string">&#x27;1982&#x27;</span>,<span class="string">&#x27;1983&#x27;</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;1984&#x27;</span>,<span class="string">&#x27;1985&#x27;</span>,<span class="string">&#x27;1986&#x27;</span>,<span class="string">&#x27;1987&#x27;</span>,<span class="string">&#x27;1988&#x27;</span>,<span class="string">&#x27;1989&#x27;</span>,<span class="string">&#x27;1990&#x27;</span>,<span class="string">&#x27;1991&#x27;</span>,<span class="string">&#x27;1992&#x27;</span></span><br><span class="line"> <span class="built_in">db</span> <span class="string">&#x27;1993&#x27;</span>,<span class="string">&#x27;1994&#x27;</span>,<span class="string">&#x27;1995&#x27;</span></span><br><span class="line">  <span class="comment">;以上是表示21年的21个字符串</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">16</span>,<span class="number">22</span>,<span class="number">382</span>,<span class="number">1356</span>,<span class="number">2390</span>,<span class="number">8000</span>,<span class="number">16000</span>,<span class="number">24486</span>,<span class="number">50065</span>,<span class="number">97479</span>,<span class="number">140417</span>,<span class="number">197514</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">345980</span>,<span class="number">590827</span>,<span class="number">803530</span>,<span class="number">1183000</span>,<span class="number">1843000</span>,<span class="number">2759000</span>,<span class="number">3753000</span>,<span class="number">4649000</span>,<span class="number">5937000</span></span><br><span class="line">  <span class="comment">;以上是表示21年公司总收入的21个dword型数据, base=data+84</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">130</span>,<span class="number">220</span>,<span class="number">476</span>,<span class="number">778</span>,<span class="number">1001</span>,<span class="number">1442</span>,<span class="number">2258</span>,<span class="number">2793</span>,<span class="number">4037</span>,<span class="number">5635</span>,<span class="number">8226</span></span><br><span class="line"> <span class="built_in">dw</span> <span class="number">11542</span>,<span class="number">14430</span>,<span class="number">15257</span>,<span class="number">17800</span></span><br><span class="line">  <span class="comment">;以上是表示21年公司雇员人数的21个word型数据,base=data+168</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">dec_table <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">21</span> dup (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,) <span class="comment">;每年数据占32位，一共21年</span></span><br><span class="line">dec_table ends</span><br><span class="line"></span><br><span class="line">stack <span class="meta">segment</span></span><br><span class="line"> <span class="built_in">dd</span> <span class="number">8</span> dup (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,dec_table </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,stack </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ss</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0</span>  <span class="comment">;某类数据的某一项作为源数据，其地址相对基址的偏移</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="number">0</span>  <span class="comment">;目的地址的偏移</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">21</span>  <span class="comment">;循环计数器</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> s:</span> </span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">cx</span>  <span class="comment">;计数器值入栈</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;年份</span></span><br><span class="line">  <span class="comment">;计算偏移</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="built_in">bx</span> </span><br><span class="line">  <span class="comment">;搬运年份</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">es</span>:[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">mov</span> [<span class="built_in">di</span>],<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">es</span>:[<span class="built_in">bx</span>+<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">mov</span> [<span class="built_in">di</span>+<span class="number">2</span>],<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="comment">;收入</span></span><br><span class="line">  <span class="comment">;计算偏移</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="built_in">bx</span> </span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">8</span></span><br><span class="line">  <span class="comment">;传参,搬运收入</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">es</span>:<span class="number">84</span>[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="built_in">es</span>:<span class="number">84</span>[<span class="built_in">bx</span>+<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="built_in">di</span></span><br><span class="line">  <span class="keyword">call</span> dtoc_dw</span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="comment">;雇员数</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line">  <span class="comment">;传参，搬运雇员数  </span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">11</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">es</span>:<span class="number">168</span>[<span class="built_in">bx</span>]</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="built_in">di</span></span><br><span class="line">  <span class="keyword">call</span> dtoc_w</span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="built_in">ax</span> <span class="comment">;cx中存储计算人均收入用到的除数</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="comment">;人均收入</span></span><br><span class="line">  <span class="comment">;传参，计算，存储</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">9</span></span><br><span class="line">  <span class="keyword">div</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="built_in">di</span></span><br><span class="line">  <span class="keyword">call</span> dtoc_w</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="comment">;步长</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">4</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span> <span class="comment">;取最小的数据项的大小作为步长</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">;打印预处理</span></span><br><span class="line">  <span class="comment">;将每一行数据中间的0都换成空格，保留最后一个0作为结束符</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">28</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">di</span></span><br><span class="line">  <span class="keyword">sub</span> <span class="built_in">di</span>,<span class="number">20h</span></span><br><span class="line"><span class="symbol">  adjust:</span></span><br><span class="line">   <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">ds</span>:[<span class="built_in">di</span>]</span><br><span class="line">   <span class="keyword">jcxz</span> set_zero</span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">loop</span> adjust</span><br><span class="line"><span class="symbol">   set_zero:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">di</span>],<span class="built_in">cl</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">di</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line">  <span class="keyword">loop</span> adjust</span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">di</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">bp</span>,<span class="built_in">sp</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">ss</span>:[<span class="built_in">bp</span>] <span class="comment">;取循环计数器cx的值</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="number">dh</span>,<span class="number">21</span>+<span class="number">3</span> <span class="comment">;行号为3;</span></span><br><span class="line">   <span class="keyword">sub</span> <span class="number">dh</span>,<span class="built_in">al</span> <span class="comment">;行号每次循环应当改变</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">5</span> <span class="comment">;列号为5;</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">2</span> <span class="comment">;颜色</span></span><br><span class="line">   <span class="keyword">mov</span> <span class="built_in">si</span>,<span class="built_in">di</span></span><br><span class="line">   <span class="keyword">sub</span> <span class="built_in">si</span>,<span class="number">20h</span> <span class="comment">;字符串首地址</span></span><br><span class="line">   <span class="comment">;prt</span></span><br><span class="line">   <span class="keyword">call</span> show_str</span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line">  </span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">cx</span>    <span class="comment">;计数器值出栈</span></span><br><span class="line"> <span class="keyword">loop</span> s</span><br><span class="line"> </span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">4c00h</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">21h</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">;name:  dtoc_dw</span></span><br><span class="line"><span class="comment">;function: 将dword型数转变为十进制数的字符串，字符串以0为结尾符</span></span><br><span class="line"><span class="comment">;parameter: (ax)=dword型数据的低16位</span></span><br><span class="line"><span class="comment">;   (dx)=dword型数据的高16位</span></span><br><span class="line"><span class="comment">;   ds:si 指向字符串的首地址</span></span><br><span class="line"><span class="comment">;return:null</span></span><br><span class="line"><span class="symbol">dtoc_dw:</span></span><br><span class="line"><span class="comment">;保存现场</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;initialize cx</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0</span> <span class="comment">;初始化cx</span></span><br><span class="line"> <span class="comment">;字符串以0为结尾符,应该放在栈底</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="symbol"> compute_dw:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">10</span><span class="comment">;divdw中用cx存放除数</span></span><br><span class="line">  <span class="keyword">call</span> divdw</span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">cx</span>,<span class="number">30h</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;判断是否商为0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">or</span> <span class="built_in">cx</span>,<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">or</span> <span class="built_in">cx</span>,<span class="built_in">dx</span>  </span><br><span class="line">  <span class="keyword">jcxz</span> save2data_dw <span class="comment">;quotient==0, conversion ends</span></span><br><span class="line">  <span class="keyword">jmp</span> compute_dw</span><br><span class="line"> </span><br><span class="line"><span class="symbol"> save2data_dw:</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">bl</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">si</span>],<span class="built_in">cl</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">jcxz</span> ok_dtoc_dw</span><br><span class="line">  <span class="keyword">jmp</span> save2data_dw</span><br><span class="line"> </span><br><span class="line"><span class="comment">;恢复现场</span></span><br><span class="line"><span class="symbol">ok_dtoc_dw:</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;name:divdw</span></span><br><span class="line"><span class="comment">;function: 进行不会产生溢出的除法运算，被除数为dword型，除数为word型，结果为dword型</span></span><br><span class="line"><span class="comment">;parameter: (ax)=dword型数据的低16位</span></span><br><span class="line"><span class="comment">;   (dx)=dword型数据的高16位</span></span><br><span class="line"><span class="comment">;   (cx)=除数</span></span><br><span class="line"><span class="comment">;return: (ax)=结果的低16位</span></span><br><span class="line"><span class="comment">;   (dx)=结果的高16位</span></span><br><span class="line"><span class="comment">;   (cx)=余数</span></span><br><span class="line"><span class="comment">;test_data F4240H/0AH=0001H 86A0H ... 0</span></span><br><span class="line"><span class="comment">;notation: X: 被除数</span></span><br><span class="line"><span class="comment">;  N: 除数</span></span><br><span class="line"><span class="comment">;  H: X高16位</span></span><br><span class="line"><span class="comment">;  L: X低16位</span></span><br><span class="line"><span class="comment">;  int: 去尾取整</span></span><br><span class="line"><span class="comment">;  rem: 取余数</span></span><br><span class="line"><span class="comment">;equation: X/N=int(H/N)*65536+(rem(H/N)*65536+L)/N</span></span><br><span class="line"><span class="symbol">divdw:</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="built_in">ax</span> <span class="comment">; save L</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">;compute int(H/N) </span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">dx</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">div</span> <span class="built_in">cx</span> <span class="comment">; quotient in ax, remainder in dx</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">ax</span> <span class="comment">;计算结果的高16位入栈保存</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;compute (rem(H/N)*65536+L)/N</span></span><br><span class="line"> <span class="comment">;从bx中取回X低16位(L)</span></span><br><span class="line"> <span class="comment">;rem(H/N)已经在dx中，因为dx是被除数的高16位，所以相当于乘了65536</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">bx</span></span><br><span class="line"> <span class="keyword">div</span> <span class="built_in">cx</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;在指定寄存器中存储结果</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="built_in">dx</span></span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;name: dtoc_w</span></span><br><span class="line"><span class="comment">;function: 将word型数据转变为表示十进制数的字符串，字符串以0为结尾符</span></span><br><span class="line"><span class="comment">;parameter: (ax)=word型数据</span></span><br><span class="line"><span class="comment">;   ds:si指向字符串的首地址</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line"><span class="comment">;application: 将数据12666以十进制的形式在屏幕的8行3列，用黑底绿字显示出来。</span></span><br><span class="line"><span class="symbol">dtoc_w:</span></span><br><span class="line"><span class="comment">;保存现场</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;initialize cx,bx</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">10</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;字符串以0为结尾符,应该放在栈底</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol"> compute:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">div</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">dx</span>,<span class="number">30h</span></span><br><span class="line">  <span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="built_in">ax</span>  <span class="comment">;ax中存的商赋值给cx</span></span><br><span class="line">  <span class="keyword">jcxz</span> save2data <span class="comment">;quotient==0, conversion ends</span></span><br><span class="line">  <span class="keyword">jmp</span> compute</span><br><span class="line"> </span><br><span class="line"><span class="symbol"> save2data:</span></span><br><span class="line">  <span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">bl</span> <span class="comment">;只有低8位存放着需要的数据</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">si</span>],<span class="built_in">cl</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">  <span class="keyword">jcxz</span> ok_dtoc_w</span><br><span class="line">  <span class="keyword">jmp</span> save2data</span><br><span class="line"> </span><br><span class="line"><span class="comment">;恢复现场</span></span><br><span class="line"><span class="symbol">ok_dtoc_w:</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">;名称: show_str</span></span><br><span class="line"><span class="comment">;功能：在指定的位置，用指定的颜色，显示一个用0结束的字符串</span></span><br><span class="line"><span class="comment">;参数： (dh)=行号(取值范围0~24), </span></span><br><span class="line"><span class="comment">;  (dl)=列号(取值范围0~79)</span></span><br><span class="line"><span class="comment">;  (cl)=颜色, </span></span><br><span class="line"><span class="comment">;  ds:si 指向字符串的首地址</span></span><br><span class="line"><span class="comment">;返回：无</span></span><br><span class="line"><span class="comment">;test_data: 在屏幕8行3列处，用绿色显示data段中的字符串</span></span><br><span class="line"><span class="symbol">show_str:</span></span><br><span class="line"><span class="comment">;保存现场</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">di</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">es</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;先计算行偏移地址，再加到页首起始地址上，存放在es段寄存器中</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="number">0ah</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="number">dh</span></span><br><span class="line"> <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="number">0b800h</span> <span class="comment">;0b800h是显存的起始地址</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">es</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;计算列偏移地址。列偏移起始地址=列号*2-2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">dl</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mul</span> <span class="built_in">bl</span> </span><br><span class="line"> <span class="keyword">sub</span> <span class="built_in">ax</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">di</span>,<span class="built_in">ax</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;暂存颜色属性</span></span><br><span class="line"> <span class="keyword">mov</span> <span class="built_in">al</span>,<span class="built_in">cl</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;开始打印数据前的部分置为空</span></span><br><span class="line"> <span class="keyword">push</span> <span class="built_in">dx</span></span><br><span class="line">  <span class="comment">;计算需置空的字符个数</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">dl</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="number">ch</span>,<span class="number">0</span></span><br><span class="line">  <span class="comment">;计算起始列起始地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="number">0</span></span><br><span class="line">   <span class="keyword">call</span> set_space</span><br><span class="line"> <span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">;按要求搬运内容至显存指定位置，以指定格式输出</span></span><br><span class="line"><span class="symbol"> prt:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="number">ch</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">ds</span>:[<span class="built_in">si</span>]</span><br><span class="line">  <span class="keyword">jcxz</span> after  <span class="comment">;若cx==0，子程序运行结束</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>+<span class="number">1</span>],<span class="built_in">al</span> <span class="comment">;搬运属性</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">di</span>],<span class="built_in">cl</span>  <span class="comment">;搬运字符</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">di</span>,<span class="number">2</span></span><br><span class="line">  <span class="comment">;搬运下一个字符</span></span><br><span class="line">  <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">  </span><br><span class="line"> <span class="keyword">jmp</span> short prt</span><br><span class="line"> </span><br><span class="line"> <span class="comment">;结束打印数据后的部分置为空</span></span><br><span class="line"><span class="symbol"> after:</span></span><br><span class="line">  <span class="comment">;计算需置空的字符个数</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">di</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">2</span></span><br><span class="line">  <span class="keyword">div</span> <span class="built_in">cl</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="number">80</span></span><br><span class="line">  <span class="keyword">sub</span> <span class="built_in">cl</span>,<span class="built_in">al</span></span><br><span class="line">  <span class="comment">;计算起始列起始地址</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">dx</span>,<span class="built_in">di</span></span><br><span class="line">  <span class="keyword">call</span> set_space</span><br><span class="line">  </span><br><span class="line"><span class="comment">;恢复现场</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">es</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">di</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">si</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">dx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">ret</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">;name:set_space</span></span><br><span class="line"><span class="comment">;function: 使得指定区间的所有列显示为空</span></span><br><span class="line"><span class="comment">;parameter: (dl)=起始列起始地址(取值范围1~80)</span></span><br><span class="line"><span class="comment">;   (cx)=区间中字符个数(取值范围0~80)</span></span><br><span class="line"><span class="comment">;return: null</span></span><br><span class="line"><span class="symbol">set_space:</span></span><br><span class="line"><span class="keyword">jcxz</span> end_set_space</span><br><span class="line"><span class="keyword">push</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">cx</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;低8位存字符ascii码置零，高8位存属性置零</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="number">bh</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">bl</span>,<span class="built_in">dl</span></span><br><span class="line"><span class="symbol"> set_:</span></span><br><span class="line">  <span class="keyword">mov</span> <span class="built_in">es</span>:[<span class="built_in">bx</span>],<span class="built_in">ax</span></span><br><span class="line">  <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">2</span></span><br><span class="line"> <span class="keyword">loop</span> set_</span><br><span class="line"> </span><br><span class="line"><span class="symbol">end_set_space:</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">cx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">bx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">ax</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<h4 id="运行结果如下"><a class="markdownIt-Anchor" href="#运行结果如下"></a> 运行结果如下</h4>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="/posts/masm-wangshuang-exercise-1/课设1-终稿.png">
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">课设1</div>
</center>
]]></content>
      <categories>
        <category>自己玩儿</category>
      </categories>
      <tags>
        <tag>assembly</tag>
        <tag>DOS</tag>
      </tags>
  </entry>
</search>
